{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport usePromise from \"react-promise-suspense\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\nvar dracoDecoderPath = \"https://www.gstatic.com/draco/versioned/decoders/1.4.1/\";\nvar dracoLoader = new DRACOLoader();\nvar gltfLoader = new GLTFLoader();\nvar fbxLoader = new FBXLoader();\ndracoLoader.setDecoderPath(dracoDecoderPath);\ngltfLoader.setDRACOLoader(dracoLoader);\n\nvar fetchGlb = function fetchGlb(url) {\n  return new Promise(function (resolve, reject) {\n    gltfLoader.load(url, function (result) {\n      resolve(result);\n    }, null, function (error) {\n      return reject(error);\n    });\n  });\n};\n\nvar fetchFbx = function fetchFbx(url) {\n  return new Promise(function (resolve, reject) {\n    fbxLoader.load(url, function (result) {\n      resolve(result);\n    }, null, function (error) {\n      return reject(error);\n    });\n  });\n};\n\nvar useFBX = function useFBX(url) {\n  _s();\n\n  return usePromise(fetchFbx, [url]);\n};\n\n_s(useFBX, \"Ks4AbIUgzezu70VNY4KF8nU2DqU=\", false, function () {\n  return [usePromise];\n});\n\nvar useGLTF = function useGLTF(url) {\n  _s2();\n\n  return usePromise(fetchGlb, [url]);\n};\n\n_s2(useGLTF, \"Ks4AbIUgzezu70VNY4KF8nU2DqU=\", false, function () {\n  return [usePromise];\n});\n\nexport { useFBX, useGLTF };","map":{"version":3,"sources":["/Users/lordokami/lordokami/lost-my-keys-vr/src/hooks/useModel.js"],"names":["usePromise","GLTFLoader","FBXLoader","DRACOLoader","dracoDecoderPath","dracoLoader","gltfLoader","fbxLoader","setDecoderPath","setDRACOLoader","fetchGlb","url","Promise","resolve","reject","load","result","error","fetchFbx","useFBX","useGLTF"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,wBAAvB;AACA,SAASC,UAAT,QAA2B,uCAA3B;AACA,SAASC,SAAT,QAA0B,sCAA1B;AAEA,SAASC,WAAT,QAA4B,wCAA5B;AAEA,IAAMC,gBAAgB,GACpB,yDADF;AAGA,IAAMC,WAAW,GAAG,IAAIF,WAAJ,EAApB;AACA,IAAMG,UAAU,GAAG,IAAIL,UAAJ,EAAnB;AACA,IAAMM,SAAS,GAAG,IAAIL,SAAJ,EAAlB;AAEAG,WAAW,CAACG,cAAZ,CAA2BJ,gBAA3B;AACAE,UAAU,CAACG,cAAX,CAA0BJ,WAA1B;;AAEA,IAAMK,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAS;AACxB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCR,IAAAA,UAAU,CAACS,IAAX,CACEJ,GADF,EAEE,UAACK,MAAD,EAAY;AACVH,MAAAA,OAAO,CAACG,MAAD,CAAP;AACD,KAJH,EAKE,IALF,EAME,UAACC,KAAD;AAAA,aAAWH,MAAM,CAACG,KAAD,CAAjB;AAAA,KANF;AAQD,GATM,CAAP;AAUD,CAXD;;AAaA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACP,GAAD,EAAS;AACxB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCP,IAAAA,SAAS,CAACQ,IAAV,CACEJ,GADF,EAEE,UAACK,MAAD,EAAY;AACVH,MAAAA,OAAO,CAACG,MAAD,CAAP;AACD,KAJH,EAKE,IALF,EAME,UAACC,KAAD;AAAA,aAAWH,MAAM,CAACG,KAAD,CAAjB;AAAA,KANF;AAQD,GATM,CAAP;AAUD,CAXD;;AAaA,IAAME,MAAM,GAAG,SAATA,MAAS,CAACR,GAAD,EAAS;AAAA;;AACtB,SAAOX,UAAU,CAACkB,QAAD,EAAW,CAACP,GAAD,CAAX,CAAjB;AACD,CAFD;;GAAMQ,M;UACGnB,U;;;AAGT,IAAMoB,OAAO,GAAG,SAAVA,OAAU,CAACT,GAAD,EAAS;AAAA;;AACvB,SAAOX,UAAU,CAACU,QAAD,EAAW,CAACC,GAAD,CAAX,CAAjB;AACD,CAFD;;IAAMS,O;UACGpB,U;;;AAGT,SAASmB,MAAT,EAAiBC,OAAjB","sourcesContent":["import usePromise from \"react-promise-suspense\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\n\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\n\nconst dracoDecoderPath =\n  \"https://www.gstatic.com/draco/versioned/decoders/1.4.1/\";\n\nconst dracoLoader = new DRACOLoader();\nconst gltfLoader = new GLTFLoader();\nconst fbxLoader = new FBXLoader();\n\ndracoLoader.setDecoderPath(dracoDecoderPath);\ngltfLoader.setDRACOLoader(dracoLoader);\n\nconst fetchGlb = (url) => {\n  return new Promise((resolve, reject) => {\n    gltfLoader.load(\n      url,\n      (result) => {\n        resolve(result);\n      },\n      null,\n      (error) => reject(error)\n    );\n  });\n};\n\nconst fetchFbx = (url) => {\n  return new Promise((resolve, reject) => {\n    fbxLoader.load(\n      url,\n      (result) => {\n        resolve(result);\n      },\n      null,\n      (error) => reject(error)\n    );\n  });\n};\n\nconst useFBX = (url) => {\n  return usePromise(fetchFbx, [url]);\n};\n\nconst useGLTF = (url) => {\n  return usePromise(fetchGlb, [url]);\n};\n\nexport { useFBX, useGLTF };\n"]},"metadata":{},"sourceType":"module"}