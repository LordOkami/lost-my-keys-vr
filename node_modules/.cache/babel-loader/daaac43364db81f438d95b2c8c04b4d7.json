{"ast":null,"code":"import { Vector3, Vector4 } from 'three';\n/**\n * NURBS utils\n *\n * See NURBSCurve and NURBSSurface.\n **/\n\n/**************************************************************\n *\tNURBS Utils\n **************************************************************/\n\n/*\nFinds knot vector span.\n\np : degree\nu : parametric value\nU : knot vector\n\nreturns the span\n*/\n\nfunction findSpan(p, u, U) {\n  var n = U.length - p - 1;\n\n  if (u >= U[n]) {\n    return n - 1;\n  }\n\n  if (u <= U[p]) {\n    return p;\n  }\n\n  var low = p;\n  var high = n;\n  var mid = Math.floor((low + high) / 2);\n\n  while (u < U[mid] || u >= U[mid + 1]) {\n    if (u < U[mid]) {\n      high = mid;\n    } else {\n      low = mid;\n    }\n\n    mid = Math.floor((low + high) / 2);\n  }\n\n  return mid;\n}\n/*\nCalculate basis functions. See The NURBS Book, page 70, algorithm A2.2\n\nspan : span in which u lies\nu    : parametric point\np    : degree\nU    : knot vector\n\nreturns array[p+1] with basis functions values.\n*/\n\n\nfunction calcBasisFunctions(span, u, p, U) {\n  var N = [];\n  var left = [];\n  var right = [];\n  N[0] = 1.0;\n\n  for (var j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    var saved = 0.0;\n\n    for (var r = 0; r < j; ++r) {\n      var rv = right[r + 1];\n      var lv = left[j - r];\n      var temp = N[r] / (rv + lv);\n      N[r] = saved + rv * temp;\n      saved = lv * temp;\n    }\n\n    N[j] = saved;\n  }\n\n  return N;\n}\n/*\nCalculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n\np : degree of B-Spline\nU : knot vector\nP : control points (x, y, z, w)\nu : parametric point\n\nreturns point for given u\n*/\n\n\nfunction calcBSplinePoint(p, U, P, u) {\n  var span = findSpan(p, u, U);\n  var N = calcBasisFunctions(span, u, p, U);\n  var C = new Vector4(0, 0, 0, 0);\n\n  for (var j = 0; j <= p; ++j) {\n    var point = P[span - p + j];\n    var Nj = N[j];\n    var wNj = point.w * Nj;\n    C.x += point.x * wNj;\n    C.y += point.y * wNj;\n    C.z += point.z * wNj;\n    C.w += point.w * Nj;\n  }\n\n  return C;\n}\n/*\nCalculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n\nspan : span in which u lies\nu    : parametric point\np    : degree\nn    : number of derivatives to calculate\nU    : knot vector\n\nreturns array[n+1][p+1] with basis functions derivatives\n*/\n\n\nfunction calcBasisFunctionDerivatives(span, u, p, n, U) {\n  var zeroArr = [];\n\n  for (var i = 0; i <= p; ++i) {\n    zeroArr[i] = 0.0;\n  }\n\n  var ders = [];\n\n  for (var _i = 0; _i <= n; ++_i) {\n    ders[_i] = zeroArr.slice(0);\n  }\n\n  var ndu = [];\n\n  for (var _i2 = 0; _i2 <= p; ++_i2) {\n    ndu[_i2] = zeroArr.slice(0);\n  }\n\n  ndu[0][0] = 1.0;\n  var left = zeroArr.slice(0);\n  var right = zeroArr.slice(0);\n\n  for (var j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    var saved = 0.0;\n\n    for (var _r = 0; _r < j; ++_r) {\n      var rv = right[_r + 1];\n      var lv = left[j - _r];\n      ndu[j][_r] = rv + lv;\n      var temp = ndu[_r][j - 1] / ndu[j][_r];\n      ndu[_r][j] = saved + rv * temp;\n      saved = lv * temp;\n    }\n\n    ndu[j][j] = saved;\n  }\n\n  for (var _j = 0; _j <= p; ++_j) {\n    ders[0][_j] = ndu[_j][p];\n  }\n\n  for (var _r2 = 0; _r2 <= p; ++_r2) {\n    var s1 = 0;\n    var s2 = 1;\n    var a = [];\n\n    for (var _i3 = 0; _i3 <= p; ++_i3) {\n      a[_i3] = zeroArr.slice(0);\n    }\n\n    a[0][0] = 1.0;\n\n    for (var k = 1; k <= n; ++k) {\n      var d = 0.0;\n      var rk = _r2 - k;\n      var pk = p - k;\n\n      if (_r2 >= k) {\n        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n        d = a[s2][0] * ndu[rk][pk];\n      }\n\n      var j1 = rk >= -1 ? 1 : -rk;\n      var j2 = _r2 - 1 <= pk ? k - 1 : p - _r2;\n\n      for (var _j3 = j1; _j3 <= j2; ++_j3) {\n        a[s2][_j3] = (a[s1][_j3] - a[s1][_j3 - 1]) / ndu[pk + 1][rk + _j3];\n        d += a[s2][_j3] * ndu[rk + _j3][pk];\n      }\n\n      if (_r2 <= pk) {\n        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][_r2];\n        d += a[s2][k] * ndu[_r2][pk];\n      }\n\n      ders[k][_r2] = d;\n      var _j2 = s1;\n      s1 = s2;\n      s2 = _j2;\n    }\n  }\n\n  var r = p;\n\n  for (var _k = 1; _k <= n; ++_k) {\n    for (var _j4 = 0; _j4 <= p; ++_j4) {\n      ders[_k][_j4] *= r;\n    }\n\n    r *= p - _k;\n  }\n\n  return ders;\n}\n/*\n\tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n\n\tp  : degree\n\tU  : knot vector\n\tP  : control points\n\tu  : Parametric points\n\tnd : number of derivatives\n\n\treturns array[d+1] with derivatives\n\t*/\n\n\nfunction calcBSplineDerivatives(p, U, P, u, nd) {\n  var du = nd < p ? nd : p;\n  var CK = [];\n  var span = findSpan(p, u, U);\n  var nders = calcBasisFunctionDerivatives(span, u, p, du, U);\n  var Pw = [];\n\n  for (var i = 0; i < P.length; ++i) {\n    var point = P[i].clone();\n    var w = point.w;\n    point.x *= w;\n    point.y *= w;\n    point.z *= w;\n    Pw[i] = point;\n  }\n\n  for (var k = 0; k <= du; ++k) {\n    var _point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n\n    for (var j = 1; j <= p; ++j) {\n      _point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n    }\n\n    CK[k] = _point;\n  }\n\n  for (var _k2 = du + 1; _k2 <= nd + 1; ++_k2) {\n    CK[_k2] = new Vector4(0, 0, 0);\n  }\n\n  return CK;\n}\n/*\nCalculate \"K over I\"\n\nreturns k!/(i!(k-i)!)\n*/\n\n\nfunction calcKoverI(k, i) {\n  var nom = 1;\n\n  for (var j = 2; j <= k; ++j) {\n    nom *= j;\n  }\n\n  var denom = 1;\n\n  for (var _j5 = 2; _j5 <= i; ++_j5) {\n    denom *= _j5;\n  }\n\n  for (var _j6 = 2; _j6 <= k - i; ++_j6) {\n    denom *= _j6;\n  }\n\n  return nom / denom;\n}\n/*\nCalculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n\nPders : result of function calcBSplineDerivatives\n\nreturns array with derivatives for rational curve.\n*/\n\n\nfunction calcRationalCurveDerivatives(Pders) {\n  var nd = Pders.length;\n  var Aders = [];\n  var wders = [];\n\n  for (var i = 0; i < nd; ++i) {\n    var point = Pders[i];\n    Aders[i] = new Vector3(point.x, point.y, point.z);\n    wders[i] = point.w;\n  }\n\n  var CK = [];\n\n  for (var k = 0; k < nd; ++k) {\n    var v = Aders[k].clone();\n\n    for (var _i4 = 1; _i4 <= k; ++_i4) {\n      v.sub(CK[k - _i4].clone().multiplyScalar(calcKoverI(k, _i4) * wders[_i4]));\n    }\n\n    CK[k] = v.divideScalar(wders[0]);\n  }\n\n  return CK;\n}\n/*\nCalculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n\np  : degree\nU  : knot vector\nP  : control points in homogeneous space\nu  : parametric points\nnd : number of derivatives\n\nreturns array with derivatives.\n*/\n\n\nfunction calcNURBSDerivatives(p, U, P, u, nd) {\n  var Pders = calcBSplineDerivatives(p, U, P, u, nd);\n  return calcRationalCurveDerivatives(Pders);\n}\n/*\nCalculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n\np1, p2 : degrees of B-Spline surface\nU1, U2 : knot vectors\nP      : control points (x, y, z, w)\nu, v   : parametric values\n\nreturns point for given (u, v)\n*/\n\n\nfunction calcSurfacePoint(p, q, U, V, P, u, v, target) {\n  var uspan = findSpan(p, u, U);\n  var vspan = findSpan(q, v, V);\n  var Nu = calcBasisFunctions(uspan, u, p, U);\n  var Nv = calcBasisFunctions(vspan, v, q, V);\n  var temp = [];\n\n  for (var l = 0; l <= q; ++l) {\n    temp[l] = new Vector4(0, 0, 0, 0);\n\n    for (var k = 0; k <= p; ++k) {\n      var point = P[uspan - p + k][vspan - q + l].clone();\n      var w = point.w;\n      point.x *= w;\n      point.y *= w;\n      point.z *= w;\n      temp[l].add(point.multiplyScalar(Nu[k]));\n    }\n  }\n\n  var Sw = new Vector4(0, 0, 0, 0);\n\n  for (var _l = 0; _l <= q; ++_l) {\n    Sw.add(temp[_l].multiplyScalar(Nv[_l]));\n  }\n\n  Sw.divideScalar(Sw.w);\n  target.set(Sw.x, Sw.y, Sw.z);\n}\n\nexport { findSpan, calcBasisFunctions, calcBSplinePoint, calcBasisFunctionDerivatives, calcBSplineDerivatives, calcKoverI, calcRationalCurveDerivatives, calcNURBSDerivatives, calcSurfacePoint };","map":{"version":3,"sources":["/Users/lordokami/lordokami/lost-my-keys-vr/node_modules/three/examples/jsm/curves/NURBSUtils.js"],"names":["Vector3","Vector4","findSpan","p","u","U","n","length","low","high","mid","Math","floor","calcBasisFunctions","span","N","left","right","j","saved","r","rv","lv","temp","calcBSplinePoint","P","C","point","Nj","wNj","w","x","y","z","calcBasisFunctionDerivatives","zeroArr","i","ders","slice","ndu","s1","s2","a","k","d","rk","pk","j1","j2","calcBSplineDerivatives","nd","du","CK","nders","Pw","clone","multiplyScalar","add","calcKoverI","nom","denom","calcRationalCurveDerivatives","Pders","Aders","wders","v","sub","divideScalar","calcNURBSDerivatives","calcSurfacePoint","q","V","target","uspan","vspan","Nu","Nv","l","Sw","set"],"mappings":"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","sourcesContent":["import {\n\tVector3,\n\tVector4\n} from 'three';\n\n/**\n * NURBS utils\n *\n * See NURBSCurve and NURBSSurface.\n **/\n\n\n/**************************************************************\n *\tNURBS Utils\n **************************************************************/\n\n/*\nFinds knot vector span.\n\np : degree\nu : parametric value\nU : knot vector\n\nreturns the span\n*/\nfunction findSpan( p, u, U ) {\n\n\tconst n = U.length - p - 1;\n\n\tif ( u >= U[ n ] ) {\n\n\t\treturn n - 1;\n\n\t}\n\n\tif ( u <= U[ p ] ) {\n\n\t\treturn p;\n\n\t}\n\n\tlet low = p;\n\tlet high = n;\n\tlet mid = Math.floor( ( low + high ) / 2 );\n\n\twhile ( u < U[ mid ] || u >= U[ mid + 1 ] ) {\n\n\t\tif ( u < U[ mid ] ) {\n\n\t\t\thigh = mid;\n\n\t\t} else {\n\n\t\t\tlow = mid;\n\n\t\t}\n\n\t\tmid = Math.floor( ( low + high ) / 2 );\n\n\t}\n\n\treturn mid;\n\n}\n\n\n/*\nCalculate basis functions. See The NURBS Book, page 70, algorithm A2.2\n\nspan : span in which u lies\nu    : parametric point\np    : degree\nU    : knot vector\n\nreturns array[p+1] with basis functions values.\n*/\nfunction calcBasisFunctions( span, u, p, U ) {\n\n\tconst N = [];\n\tconst left = [];\n\tconst right = [];\n\tN[ 0 ] = 1.0;\n\n\tfor ( let j = 1; j <= p; ++ j ) {\n\n\t\tleft[ j ] = u - U[ span + 1 - j ];\n\t\tright[ j ] = U[ span + j ] - u;\n\n\t\tlet saved = 0.0;\n\n\t\tfor ( let r = 0; r < j; ++ r ) {\n\n\t\t\tconst rv = right[ r + 1 ];\n\t\t\tconst lv = left[ j - r ];\n\t\t\tconst temp = N[ r ] / ( rv + lv );\n\t\t\tN[ r ] = saved + rv * temp;\n\t\t\tsaved = lv * temp;\n\n\t\t}\n\n\t\tN[ j ] = saved;\n\n\t}\n\n\treturn N;\n\n}\n\n\n/*\nCalculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n\np : degree of B-Spline\nU : knot vector\nP : control points (x, y, z, w)\nu : parametric point\n\nreturns point for given u\n*/\nfunction calcBSplinePoint( p, U, P, u ) {\n\n\tconst span = findSpan( p, u, U );\n\tconst N = calcBasisFunctions( span, u, p, U );\n\tconst C = new Vector4( 0, 0, 0, 0 );\n\n\tfor ( let j = 0; j <= p; ++ j ) {\n\n\t\tconst point = P[ span - p + j ];\n\t\tconst Nj = N[ j ];\n\t\tconst wNj = point.w * Nj;\n\t\tC.x += point.x * wNj;\n\t\tC.y += point.y * wNj;\n\t\tC.z += point.z * wNj;\n\t\tC.w += point.w * Nj;\n\n\t}\n\n\treturn C;\n\n}\n\n\n/*\nCalculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n\nspan : span in which u lies\nu    : parametric point\np    : degree\nn    : number of derivatives to calculate\nU    : knot vector\n\nreturns array[n+1][p+1] with basis functions derivatives\n*/\nfunction calcBasisFunctionDerivatives( span, u, p, n, U ) {\n\n\tconst zeroArr = [];\n\tfor ( let i = 0; i <= p; ++ i )\n\t\tzeroArr[ i ] = 0.0;\n\n\tconst ders = [];\n\n\tfor ( let i = 0; i <= n; ++ i )\n\t\tders[ i ] = zeroArr.slice( 0 );\n\n\tconst ndu = [];\n\n\tfor ( let i = 0; i <= p; ++ i )\n\t\tndu[ i ] = zeroArr.slice( 0 );\n\n\tndu[ 0 ][ 0 ] = 1.0;\n\n\tconst left = zeroArr.slice( 0 );\n\tconst right = zeroArr.slice( 0 );\n\n\tfor ( let j = 1; j <= p; ++ j ) {\n\n\t\tleft[ j ] = u - U[ span + 1 - j ];\n\t\tright[ j ] = U[ span + j ] - u;\n\n\t\tlet saved = 0.0;\n\n\t\tfor ( let r = 0; r < j; ++ r ) {\n\n\t\t\tconst rv = right[ r + 1 ];\n\t\t\tconst lv = left[ j - r ];\n\t\t\tndu[ j ][ r ] = rv + lv;\n\n\t\t\tconst temp = ndu[ r ][ j - 1 ] / ndu[ j ][ r ];\n\t\t\tndu[ r ][ j ] = saved + rv * temp;\n\t\t\tsaved = lv * temp;\n\n\t\t}\n\n\t\tndu[ j ][ j ] = saved;\n\n\t}\n\n\tfor ( let j = 0; j <= p; ++ j ) {\n\n\t\tders[ 0 ][ j ] = ndu[ j ][ p ];\n\n\t}\n\n\tfor ( let r = 0; r <= p; ++ r ) {\n\n\t\tlet s1 = 0;\n\t\tlet s2 = 1;\n\n\t\tconst a = [];\n\t\tfor ( let i = 0; i <= p; ++ i ) {\n\n\t\t\ta[ i ] = zeroArr.slice( 0 );\n\n\t\t}\n\n\t\ta[ 0 ][ 0 ] = 1.0;\n\n\t\tfor ( let k = 1; k <= n; ++ k ) {\n\n\t\t\tlet d = 0.0;\n\t\t\tconst rk = r - k;\n\t\t\tconst pk = p - k;\n\n\t\t\tif ( r >= k ) {\n\n\t\t\t\ta[ s2 ][ 0 ] = a[ s1 ][ 0 ] / ndu[ pk + 1 ][ rk ];\n\t\t\t\td = a[ s2 ][ 0 ] * ndu[ rk ][ pk ];\n\n\t\t\t}\n\n\t\t\tconst j1 = ( rk >= - 1 ) ? 1 : - rk;\n\t\t\tconst j2 = ( r - 1 <= pk ) ? k - 1 : p - r;\n\n\t\t\tfor ( let j = j1; j <= j2; ++ j ) {\n\n\t\t\t\ta[ s2 ][ j ] = ( a[ s1 ][ j ] - a[ s1 ][ j - 1 ] ) / ndu[ pk + 1 ][ rk + j ];\n\t\t\t\td += a[ s2 ][ j ] * ndu[ rk + j ][ pk ];\n\n\t\t\t}\n\n\t\t\tif ( r <= pk ) {\n\n\t\t\t\ta[ s2 ][ k ] = - a[ s1 ][ k - 1 ] / ndu[ pk + 1 ][ r ];\n\t\t\t\td += a[ s2 ][ k ] * ndu[ r ][ pk ];\n\n\t\t\t}\n\n\t\t\tders[ k ][ r ] = d;\n\n\t\t\tconst j = s1;\n\t\t\ts1 = s2;\n\t\t\ts2 = j;\n\n\t\t}\n\n\t}\n\n\tlet r = p;\n\n\tfor ( let k = 1; k <= n; ++ k ) {\n\n\t\tfor ( let j = 0; j <= p; ++ j ) {\n\n\t\t\tders[ k ][ j ] *= r;\n\n\t\t}\n\n\t\tr *= p - k;\n\n\t}\n\n\treturn ders;\n\n}\n\n\n/*\n\tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n\n\tp  : degree\n\tU  : knot vector\n\tP  : control points\n\tu  : Parametric points\n\tnd : number of derivatives\n\n\treturns array[d+1] with derivatives\n\t*/\nfunction calcBSplineDerivatives( p, U, P, u, nd ) {\n\n\tconst du = nd < p ? nd : p;\n\tconst CK = [];\n\tconst span = findSpan( p, u, U );\n\tconst nders = calcBasisFunctionDerivatives( span, u, p, du, U );\n\tconst Pw = [];\n\n\tfor ( let i = 0; i < P.length; ++ i ) {\n\n\t\tconst point = P[ i ].clone();\n\t\tconst w = point.w;\n\n\t\tpoint.x *= w;\n\t\tpoint.y *= w;\n\t\tpoint.z *= w;\n\n\t\tPw[ i ] = point;\n\n\t}\n\n\tfor ( let k = 0; k <= du; ++ k ) {\n\n\t\tconst point = Pw[ span - p ].clone().multiplyScalar( nders[ k ][ 0 ] );\n\n\t\tfor ( let j = 1; j <= p; ++ j ) {\n\n\t\t\tpoint.add( Pw[ span - p + j ].clone().multiplyScalar( nders[ k ][ j ] ) );\n\n\t\t}\n\n\t\tCK[ k ] = point;\n\n\t}\n\n\tfor ( let k = du + 1; k <= nd + 1; ++ k ) {\n\n\t\tCK[ k ] = new Vector4( 0, 0, 0 );\n\n\t}\n\n\treturn CK;\n\n}\n\n\n/*\nCalculate \"K over I\"\n\nreturns k!/(i!(k-i)!)\n*/\nfunction calcKoverI( k, i ) {\n\n\tlet nom = 1;\n\n\tfor ( let j = 2; j <= k; ++ j ) {\n\n\t\tnom *= j;\n\n\t}\n\n\tlet denom = 1;\n\n\tfor ( let j = 2; j <= i; ++ j ) {\n\n\t\tdenom *= j;\n\n\t}\n\n\tfor ( let j = 2; j <= k - i; ++ j ) {\n\n\t\tdenom *= j;\n\n\t}\n\n\treturn nom / denom;\n\n}\n\n\n/*\nCalculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n\nPders : result of function calcBSplineDerivatives\n\nreturns array with derivatives for rational curve.\n*/\nfunction calcRationalCurveDerivatives( Pders ) {\n\n\tconst nd = Pders.length;\n\tconst Aders = [];\n\tconst wders = [];\n\n\tfor ( let i = 0; i < nd; ++ i ) {\n\n\t\tconst point = Pders[ i ];\n\t\tAders[ i ] = new Vector3( point.x, point.y, point.z );\n\t\twders[ i ] = point.w;\n\n\t}\n\n\tconst CK = [];\n\n\tfor ( let k = 0; k < nd; ++ k ) {\n\n\t\tconst v = Aders[ k ].clone();\n\n\t\tfor ( let i = 1; i <= k; ++ i ) {\n\n\t\t\tv.sub( CK[ k - i ].clone().multiplyScalar( calcKoverI( k, i ) * wders[ i ] ) );\n\n\t\t}\n\n\t\tCK[ k ] = v.divideScalar( wders[ 0 ] );\n\n\t}\n\n\treturn CK;\n\n}\n\n\n/*\nCalculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n\np  : degree\nU  : knot vector\nP  : control points in homogeneous space\nu  : parametric points\nnd : number of derivatives\n\nreturns array with derivatives.\n*/\nfunction calcNURBSDerivatives( p, U, P, u, nd ) {\n\n\tconst Pders = calcBSplineDerivatives( p, U, P, u, nd );\n\treturn calcRationalCurveDerivatives( Pders );\n\n}\n\n\n/*\nCalculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n\np1, p2 : degrees of B-Spline surface\nU1, U2 : knot vectors\nP      : control points (x, y, z, w)\nu, v   : parametric values\n\nreturns point for given (u, v)\n*/\nfunction calcSurfacePoint( p, q, U, V, P, u, v, target ) {\n\n\tconst uspan = findSpan( p, u, U );\n\tconst vspan = findSpan( q, v, V );\n\tconst Nu = calcBasisFunctions( uspan, u, p, U );\n\tconst Nv = calcBasisFunctions( vspan, v, q, V );\n\tconst temp = [];\n\n\tfor ( let l = 0; l <= q; ++ l ) {\n\n\t\ttemp[ l ] = new Vector4( 0, 0, 0, 0 );\n\t\tfor ( let k = 0; k <= p; ++ k ) {\n\n\t\t\tconst point = P[ uspan - p + k ][ vspan - q + l ].clone();\n\t\t\tconst w = point.w;\n\t\t\tpoint.x *= w;\n\t\t\tpoint.y *= w;\n\t\t\tpoint.z *= w;\n\t\t\ttemp[ l ].add( point.multiplyScalar( Nu[ k ] ) );\n\n\t\t}\n\n\t}\n\n\tconst Sw = new Vector4( 0, 0, 0, 0 );\n\tfor ( let l = 0; l <= q; ++ l ) {\n\n\t\tSw.add( temp[ l ].multiplyScalar( Nv[ l ] ) );\n\n\t}\n\n\tSw.divideScalar( Sw.w );\n\ttarget.set( Sw.x, Sw.y, Sw.z );\n\n}\n\n\n\nexport {\n\tfindSpan,\n\tcalcBasisFunctions,\n\tcalcBSplinePoint,\n\tcalcBasisFunctionDerivatives,\n\tcalcBSplineDerivatives,\n\tcalcKoverI,\n\tcalcRationalCurveDerivatives,\n\tcalcNURBSDerivatives,\n\tcalcSurfacePoint,\n};\n"]},"metadata":{},"sourceType":"module"}